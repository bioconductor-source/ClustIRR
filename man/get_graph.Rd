\name{get_graph}
\alias{get_graph}
\title{Get graph structure from \code{clust_irr} object}
\usage{get_graph(clust_irr, sample_id = "S", custom_db = NULL)}
\arguments{
\item{clust_irr}{S4 object generated by the function \code{cluster_irr}}
\item{sample_id}{character, name of the repertoire (default = S)}
\item{custom_db}{data.frame, custom database mapping CDR3 sequences to their
cognate antigens. The structure of \code{custom_db} must be identical to 
e.g. data(vdjdb). This is an optional input that allows us to annotate the 
CDR3s in our data. If \code{custom_db} is not provided, ClustIRR will use 
the internal databases. Else, ClustIRR will use both the internal and user-
provided databases.}
}
\value{
The main output of this function is an \code{igraph} object. Additionally, 
we provide a data.frame in which rows are clones (vertices) in the graph.
}

\description{
The main output of this function is an \code{igraph} object.

The vertices in the graph represent clones. Undirected edges are drawn 
between a pair of vertices if the corresponding clones that are locally 
and/or globally similar.

The function matches the CDR3 sequences in the data (repertoire) to CDR3s that
are known to recognize specific antigenic epitopes. This data is obtained from 
databases, such as, VDJdb, McPAS-TCR and TCR3d. The optional input parameter
\code{custom_db} allows the user to provide custom database of CDR3s and their 
cognate antigens. If \code{custom_db} is not provided, ClustIRR will use 
internal databases. Else, ClustIRR will use both the internal and user-provided 
databases.
}

\examples{
# load package input data
data("CDR3ab")
s <- data.frame(CDR3b = CDR3ab[1:100, "CDR3b"], clone_size = 1)
r <- data.frame(CDR3b = CDR3ab[1:5000, "CDR3b"], clone_size = 1)

# artificially enrich motif 'RWGW' inside sample dataset
substr(x = s$CDR3b[1:20], start = 6, stop = 9) <- "RWGW"

# add an artificial clonal expansion of two sequences to the sample dataset
s <- rbind(s, data.frame(CDR3b = c("CATSRADKPDGLDALETQYF", 
                                   "CATSRAAKPDGLAALSTQYF"),
                         clone_size = 5))

# run ClustIRR analysis
out <- cluster_irr(s = s,
                   r = r,
                   ks = 4,
                   cores = 1,
                   control = list(trim_flank_aa = 3))

# get graph
g <- get_graph(out)

names(g)
}
